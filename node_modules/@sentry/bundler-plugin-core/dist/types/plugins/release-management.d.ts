import { SentryCliCommitsOptions, SentryCliNewDeployOptions } from "@sentry/cli";
import { Hub, NodeClient } from "@sentry/node";
import { UnpluginOptions } from "unplugin";
import { Logger } from "../sentry/logger";
import { IncludeEntry } from "../types";
interface ReleaseManagementPluginOptions {
    logger: Logger;
    releaseName: string;
    shouldCreateRelease: boolean;
    shouldFinalizeRelease: boolean;
    include?: string | IncludeEntry | Array<string | IncludeEntry>;
    setCommitsOption?: SentryCliCommitsOptions;
    deployOptions?: SentryCliNewDeployOptions;
    dist?: string;
    handleRecoverableError: (error: unknown) => void;
    sentryHub: Hub;
    sentryClient: NodeClient;
    sentryCliOptions: {
        url: string;
        authToken: string;
        org?: string;
        project: string;
        vcsRemote: string;
        silent: boolean;
        headers?: Record<string, string>;
    };
    createDependencyOnSourcemapFiles: () => () => void;
}
export declare function releaseManagementPlugin({ releaseName, include, dist, setCommitsOption, shouldCreateRelease, shouldFinalizeRelease, deployOptions, handleRecoverableError, sentryHub, sentryClient, sentryCliOptions, createDependencyOnSourcemapFiles, }: ReleaseManagementPluginOptions): UnpluginOptions;
export {};
//# sourceMappingURL=release-management.d.ts.map